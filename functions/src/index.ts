import * as functions from "firebase-functions/v1";
import * as admin from "firebase-admin";

admin.initializeApp();

/**
 * üì¢ NOTIFICATION √Ä TOUS : message du chef
 * D√©clench√©e √† la cr√©ation d‚Äôun doc dans chefMessages/{messageId}.
 * Envoie une notif √† tous via le topic all_users.
 */
export const notifyAllUsersOnChefMessage = functions.firestore
  .document("chefMessages/{messageId}")
  .onCreate(async (snap, context) => {
    const data = snap.data();
    const title = "Message du chef";
    const body = data?.message ?? "Nouveau message disponible.";

    const payload = {
      notification: { title, body },
    };

    try {
      await admin.messaging().sendToTopic("all_users", payload);
      console.log("‚úÖ Notification envoy√©e √† tous (topic all_users)");
    } catch (error) {
      console.error("‚ùå Erreur notification g√©n√©rale :", error);
    }
  });

/**
 * üë• NOTIFICATION √Ä UN GROUPE
 * D√©clench√©e √† la cr√©ation d‚Äôun doc dans groupMessages/{messageId}.
 * Chaque message contient { group: "OPS"|"PNT"|"TECH", message: "..."}.
 */
export const notifyGroupOnChefMessage = functions.firestore
  .document("groupMessages/{messageId}")
  .onCreate(async (snap, context) => {
    const data = snap.data();
    const group = data?.group;
    const message = data?.message ?? "Nouveau message disponible.";

    if (!group) {
      console.log("‚ö†Ô∏è Aucun groupe indiqu√© dans le message.");
      return;
    }

    const title = `Message ${group}`;
    const body = message;

    const payload = {
      notification: { title, body },
    };

    try {
      await admin.messaging().sendToTopic(`group_${group}`, payload);
      console.log(`‚úÖ Notification envoy√©e au groupe ${group}`);
    } catch (error) {
      console.error(`‚ùå Erreur notification groupe ${group} :`, error);
    }
  });

/**
 * üöÅ ‚úàÔ∏è NOTIFICATIONS MISSION : avion (ATR72) ou h√©lico (AH175/EC225)
 * D√©clench√©e √† chaque ajout, modif ou suppression dans missions/{missionId}.
 * Notifie l‚Äô√©quipage + CDT (+ m√©canos avion).
 */
export const notifyMissionParticipants = functions.firestore
  .document("missions/{missionId}")
  .onWrite(async (change, context) => {
    const newData = change.after.exists ? change.after.data() : null;
    const oldData = change.before.exists ? change.before.data() : null;
    if (!newData && !oldData) return;

    const isDeleted = !newData;
    const mission = (newData ?? oldData) as FirebaseFirestore.DocumentData;
    const { vecteur, pilote1, pilote2, pilote3, date } = mission;

    // ‚úÖ Type appareil
    const isAvion = vecteur === "ATR72";
    const isHelico = ["AH175", "EC225"].includes(vecteur);

    // ‚úÖ √âquipage
    const trigrammes: string[] = [pilote1, pilote2, isHelico ? pilote3 : null]
      .filter((val, idx, arr) => val && arr.indexOf(val) === idx);

    const tokens: string[] = [];

    async function addTokensFromQuery(query: FirebaseFirestore.Query<FirebaseFirestore.DocumentData>) {
      const snapshot = await query.get();
      snapshot.forEach((doc) => {
        const data = doc.data();
        if (data.fcmToken && !tokens.includes(data.fcmToken)) {
          tokens.push(data.fcmToken);
        }
      });
    }

    // ‚úÖ Ajouter √©quipage
    for (const trigramme of trigrammes) {
      await addTokensFromQuery(
        admin.firestore().collection("users").where("trigramme", "==", trigramme)
      );
    }

    // ‚úÖ Ajouter CDT
    await addTokensFromQuery(
      admin.firestore().collection("users").where("fonction", "==", "CDT")
    );

    // ‚úÖ Ajouter m√©canos avion
    if (isAvion) {
      await addTokensFromQuery(
        admin.firestore().collection("users")
          .where("role", "==", "mecano")
          .where("group", "==", "avion")
      );
    }

    if (tokens.length === 0) {
      console.log("‚ö†Ô∏è Aucun token trouv√© pour cette mission.");
      return;
    }

    // ‚úÖ Action
    const action = isDeleted
      ? "supprim√©e"
      : change.before.exists
        ? "modifi√©e"
        : "cr√©√©e";

    // ‚úÖ Date format FR (jour + mois, sans ann√©e)
    const dateObj = date?.toDate ? date.toDate() : new Date(date);
    const dateLisible = new Intl.DateTimeFormat("fr-FR", {
      day: "numeric",
      month: "long",
    }).format(dateObj);

    // ‚úÖ Titre
    const title = isAvion ? "Mission ATR72" : `Mission ${vecteur}`;

    // ‚úÖ Payload
    const payload: admin.messaging.MulticastMessage = {
      tokens,
      notification: {
        title,
        body: `Mission du ${dateLisible} ‚Äì ${action}.`,
      },
      data: {
        missionId: context.params.missionId,
      },
    };

    try {
      const response = await admin.messaging().sendEachForMulticast(payload);
      console.log(
        `‚úÖ Notification ${title} envoy√©e √† ${response.successCount} destinataires (√©checs: ${response.failureCount}).`
      );
    } catch (error) {
      console.error("‚ùå Erreur d‚Äôenvoi notification mission :", error);
    }
  });
